// <auto-generated />
using System;
using BackendSico.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendSico.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackendSico.Models.Course", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("fkTeacher")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("fkTeacher");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("BackendSico.Models.CourseDetail", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int>("fkCourse")
                        .HasColumnType("int");

                    b.Property<int>("fkStudent")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("fkCourse");

                    b.HasIndex("fkStudent");

                    b.ToTable("CourseDetail", (string)null);
                });

            modelBuilder.Entity("BackendSico.Models.Person", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastname1")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("lastname2")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("name2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("typePerson")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("BackendSico.Models.Student", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int>("fkPersonStu")
                        .HasColumnType("int");

                    b.Property<Guid>("tuition")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("fkPersonStu");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("BackendSico.Models.Teacher", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int>("fkPersonTea")
                        .HasColumnType("int");

                    b.Property<Guid>("professionalLicense")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("fkPersonTea");

                    b.ToTable("Teacher", (string)null);
                });

            modelBuilder.Entity("BackendSico.Models.Course", b =>
                {
                    b.HasOne("BackendSico.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("fkTeacher")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("BackendSico.Models.CourseDetail", b =>
                {
                    b.HasOne("BackendSico.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("fkCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendSico.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("fkStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BackendSico.Models.Student", b =>
                {
                    b.HasOne("BackendSico.Models.Person", "Person")
                        .WithMany("Students")
                        .HasForeignKey("fkPersonStu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("BackendSico.Models.Teacher", b =>
                {
                    b.HasOne("BackendSico.Models.Person", "Person")
                        .WithMany("Teachers")
                        .HasForeignKey("fkPersonTea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("BackendSico.Models.Person", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });
#pragma warning restore 612, 618
        }
    }
}
